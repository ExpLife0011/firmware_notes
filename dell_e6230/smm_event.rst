SMM Event 的分析
=================

在发现了 SMM Event 这个协议的重要性后，我开始分析这个协议，当然了，是从我关心的函数开始分析。我的方法是逆向这个函数和所有相关的函数，把它们写成 C 代码，大致如 `SmmEvent.c <SmmEvent.c>`__ 所示。

其中有一些代码值得注意：

* ``(a0[0] ^ a0[1]) % 53`` 这样的算术表达式有点奇怪，它应该是一个散列函数
* 注意到我们关心的函数 ``fcn_18000057c`` 首先访问了 0x180001180+8*3 之后的一个结构（应该是个协议接口）之后调用了这个接口在 0x38 偏移处的一个函数，而这个模块的一个比较早调用的函数 ``fcn_1800002b0`` 早早就把这部分的数据初始化为 0 了，因此，应该是在别的地方网这个区域里面填值。

再注意一下 ``fcn_1800007c8`` 这个在 SMM Event 协议接口 0x00 位置的函数。开始我并没关注，但是通过找 0x180001180+8*3=0x180001198 的交叉引用，找到了这个函数，碰巧就是 SMM Event 协议的一个接口函数，因此它非常重要。它恰好有是往那个内存区域填入一个接口地址的功能，我觉得它应该就 SMM Event 协议的一个注册函数。

再经过一些其他的分析发现，上面的散列函数 ``(a0[0] ^ a0[1]) % 53`` 里面的参数 a0 一般都指向一个 GUID，换句话说，SMM Event 应该是针对于 GUID 的，因此回到 ``acpi_enable`` 函数。看看它调用 SMM Event 的接口函数时的第一个参数 rcx 指向的内容::

 0x180000e40  da3d 69cd 2c59 d54b b130 3d5d f3d3 d5be

用 UEFITool 搜索这个 GUID，发现有这个 GUID 的模块并不多。通过名字略过一些不太像是和 ACPI 相关的模块，我们又回到了 DellNbEcSmm. 通过在模块中搜索这个 GUID 串和找交叉引用，我们看到了::

 |           0x1800032ce      488b05ab7a00.  mov rax, qword [0x18000ad80] ; gSmmServ ; [0x18000ad80:8]=0
 |           0x1800032d5      bb02000000     mov ebx, 2
 |           0x1800032da      488d15cbffff.  lea rdx, [fcn.1800032ac]   ; 0x1800032ac ; "H\x8b\x05\x15{"
 |           0x1800032e1      4c8b5010       mov r10, qword [rax + 0x10] ; [0x10:8]=-1 ; 16
 |           0x1800032e5      488d442450     lea rax, [arg_50h]         ; 0x50 ; 'P' ; 80
 |           0x1800032ea      488d0d077600.  lea rcx, [0x18000a8f8]     ; guid_cd693dda
 |           0x1800032f1      448bcb         mov r9d, ebx
 |           0x1800032f4      4533c0         xor r8d, r8d
 |           0x1800032f7      4889442420     mov qword [local_20h], rax
 |           0x1800032fc      41ff12         call qword [r10]

果然，它调了 SMM Event 里面的那个注册函数，注册了这个 GUID. 同时，注册了这个 GUID 后，会在后续使用 SMM Event 时被调用的函数就是 rdx 指向的函数 fcn.1800032ac::

 |           0x1800032ac      488b05157b00.  mov rax, qword [0x18000adc8] ; proto_7310e28e ; [0x18000adc8:8]=0
 |           0x1800032b3      450fb608       movzx r9d, byte [r8]
 |           0x1800032b7      ba3a000000     mov edx, 0x3a              ; ':' ; 58
 |           0x1800032bc      448d42c7       lea r8d, [rdx - 0x39]
 |           0x1800032c0      488bc8         mov rcx, rax
 \           0x1800032c3      48ff6018       jmp qword [rax + 0x18]

又是协议的使用，经过分析 0x18000adc8 是 GUID 为 7310e28e-... 的协议的一个实例，接下来要分析的就是它了。
